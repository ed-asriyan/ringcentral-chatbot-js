{"version":3,"sources":["../../src/apps/admin.js"],"names":["createApp","handle","options","app","use","users","process","env","RINGCENTRAL_CHATBOT_ADMIN_USERNAME","RINGCENTRAL_CHATBOT_ADMIN_PASSWORD","unauthorizedResponse","req","put","res","query","force","type","send","bots","Bot","findAll","bot","set","check","ensureWebHook","services","Service","service","Cache","destroy","where","updatedAt","Op","lt","subtract","toDate","get","result","JSON","stringify","subscriptions","getSubscriptions","caches","cache"],"mappings":"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","sourcesContent":["import express from 'express'\nimport basicAuth from 'express-basic-auth'\nimport { Op } from 'sequelize'\nimport moment from 'moment'\n\nimport { Bot, Service, Cache, setupDatabase } from '../models'\n\nconst createApp = (handle, options) => {\n  const app = express()\n  app.use(basicAuth({\n    users: {\n      [process.env.RINGCENTRAL_CHATBOT_ADMIN_USERNAME]: process.env.RINGCENTRAL_CHATBOT_ADMIN_PASSWORD\n    },\n    unauthorizedResponse: req => '401 Unauthorized'\n  }))\n\n  // create database tables\n  // ?force=true to delete existing tables\n  app.put('/setup-database', async (req, res) => {\n    await setupDatabase(req.query.force === 'true')\n    await handle({ type: 'SetupDatabase' })\n    res.send('')\n  })\n\n  // \"maintain\": remove dead bots from database, ensure live bots have WebHooks, destroy very old cache data\n  app.put('/maintain', async (req, res) => {\n    const bots = await Bot.findAll()\n    for (const bot of bots) {\n      bot.set(options)\n      if (await bot.check()) {\n        await bot.ensureWebHook()\n      }\n    }\n    const services = await Service.findAll()\n    for (const service of services) {\n      await service.check()\n    }\n    await Cache.destroy({\n      where: {\n        updatedAt: {\n          [Op.lt]: moment().subtract(365, 'days').toDate()\n        }\n      }\n    })\n    await handle({ type: 'Maintain' })\n    res.send('')\n  })\n\n  // provide administrator with diagnostic information for troubleshooting\n  app.get('/diagnostic', async (req, res) => {\n    const bots = await Bot.findAll()\n    let result = ''\n    for (const bot of bots) {\n      result += '*****************\\n'\n      result += `<pre>\\n${JSON.stringify(bot, null, 2)}\\n</pre>\\n`\n      const subscriptions = await bot.getSubscriptions()\n      result += `<pre>\\n${JSON.stringify(subscriptions, null, 2)}\\n</pre>\\n`\n      result += '*****************\\n'\n    }\n    result += '\\n<hr/>\\n\\n'\n    const services = await Service.findAll()\n    for (const service of services) {\n      result += `<pre>\\n${JSON.stringify(service, null, 2)}}\\n</pre>\\n`\n    }\n    result += '\\n<hr/>\\n\\n'\n    const caches = await Cache.findAll()\n    for (const cache of caches) {\n      result += `<pre>\\n${JSON.stringify(cache, null, 2)}}\\n</pre>\\n`\n    }\n    res.send(result)\n  })\n\n  // create db tables if not exist\n  setupDatabase()\n\n  return app\n}\n\nexport default createApp\n"],"file":"admin.js"}